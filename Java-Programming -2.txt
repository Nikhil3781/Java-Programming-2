1.What do mean by Data Structures ?
Ans:A data structure is a particular way of organizing data in a computer so that it can be used effectively.


2.What are some of the applications of DS?
Ans: Arrays,Trees,Heap,LinkedList etc.

3.What are the advantages of linked list over arrays?
Ans:The principal benefit of a linked list over a conventional array is that the list elements can be easily inserted or removed without reallocation or reorganization of the entire structure because the data items need not be stored contiguously in memory or on disk, while restructuring an array at run-time is a much more expensive operation. Linked lists allow insertion and removal of nodes at any point in the list, 
and allow doing so with a constant number of operations by keeping the link previous to the link being added or removed in memory during list traversal.

4.Write a syntax to create a single node in singly linked list in c?
Ans:#Represent a node of the singly linked list  
class Node:  
    def __init__(self,data):  
        self.data = data;  
        self.next = None;  
          
class SinglyLinkedList:  
    #Represent the head and tail of the singly linked list  
    def __init__(self):  
        self.head = None;  
        self.tail = None;  
          
    #addNode() will add a new node to the list  
    def addNode(self, data):  
        #Create a new node  
        newNode = Node(data);

5.What is the use of double linked list over a single linked list?
Ans:1.The double linked list can be traversed both in forward and backward direction .
    2.It is also more efficient in the delete operation whenever the pointer to node is given.
    3.We can quickly insert a new node before a given node.

6.What is difference between array and a stack?
Ans:In the array any element can be assesed easily as every element is given an id.But in the case of stack we only have push and pop operations.And that is done only 
at the upper end.But both are used in storing the data.But compared to stack arrays are fastly assesble because of their assess to a particular node by using thier id.

7.What are the minimum number of queues required to implement the priority queue?
Ans:Two queues are required one for storing data and other for priorities.

8.What are the different types of traversals techniques in tree?
Ans:There are three types of traversals techniques in a tree : they are:
    1.IN order traversal
    2.PRE order traversal
    3.POSTR order traversal

9.Why it is said that searching a node in a binary search tree is efficient than that of a simple binary tree?
Ans:It supports three main operations: searching of elements, insertion of elements, and deletion of elements. Binary Search Tree allows for fast retrieval of elements stored in 
the tree as each node key is thoroughly compared with the root node, which discards half of the tree.

10.What are the application of Graph DS?
Ans:Graphs are awesome data structures that you use every day through Google Search, Google Maps, GPS, and social media. They are used to represent elements that share connections. 
The elements in the graph are called Nodes and the connections between them are called Edges.

11.Can we apply a Binary search algorithm to a sorted linked list?
Ans:Yes, Binary search is possible on the linked list if the list is ordered and you know the count of elements in list. But While sorting the list, you can access a
 single element at a time through a pointer to that node i.e. either a previous node or next node.

12.When can you tell a memory leak will occur?
Ans:that occurs when a computer program incorrectly manages memory allocations in a way that memory which is no longer needed is not released. A memory leak may also happen when an 
object is stored in memory but cannot be accessed by the running code.

13.How will you check wheather a given binary tree is binary search tree or not?
Ans:A Binary Search Tree (BST) is a binary tree with the following properties:
The left subtree of a particular node will always contain nodes whose keys are less than that node’s key.
The right subtree of a particular node will always contain nodes with keys greater than that node’s key.
The left and right subtree of a particular node will also, in turn, be binary search trees.
This will say that the given binary tree is binary search tree.


14.Which data structure is ideal to perform recursion operation and why?
Ans:Stack. Because of its LIFO (Last In First Out) property it remembers its 'caller' so knows whom to return when the function has to return. Recursion 
makes use of system stack for storing the return addresses of the function calls. 
Every recursive function has its equivalent iterative (non-recursive) function.

15.What are some important applications of Stack?
Ans:Stacks can be used for expression evaluation.
Stacks can be used to check parenthesis matching in an expression.
Stacks can be used for Conversion from one form of expression to another.
Stacks can be used for Memory Management.
Stack data structures are used in backtracking problems.

16.Convert the expression to a post and prefix notations?
Ans:NOT GIVEN ANY EXPRESSION.


17.Sorting a stack using a temporary stack?
Ans:We follow this algorithm.
Create a temporary stack say tmpStack.
While input stack is NOT empty do this:
Pop an element from input stack call it temp
while temporary stack is NOT empty and top of temporary stack is greater than temp,
pop from temporary stack and push it to the input stack
push temp in temporary stack
The sorted numbers are in tmpStack

18.Programme to reverse a queue?
Ans:queue reverse_Function(queue)
{
    if (queue is empty)
       return queue;
    else {
       data = queue.front()
       queue.pop()
       queue = reverseFunction(queue);
       q.push(data);
       return queue;
    }
}

19.Programme to reverse a first k elements of a queue?
Ans: Java program to reverse first k elements  of a queue. 
import java.util.LinkedList; 
import java.util.Queue; 
import java.util.Stack; 

public class Reverse_k_element_queue { 

	static Queue<Integer> queue; 


	static void reverseQueueFirstKElements(int k) 
	{ 
		if (queue.isEmpty() == true
			|| k > queue.size()) 
			return; 
		if (k <= 0) 
			return; 

		Stack<Integer> stack = new Stack<Integer>(); 

		 
		for (int i = 0; i < k; i++) { 
			stack.push(queue.peek()); 
			queue.remove(); 
		} 

		
		while (!stack.empty()) { 
			queue.add(stack.peek()); 
			stack.pop(); 
		} 

		
		for (int i = 0; i < queue.size() - k; i++) { 
			queue.add(queue.peek()); 
			queue.remove(); 
		} 
	} 

	
	static void Print() 
	{ 
		while (!queue.isEmpty()) { 
			System.out.print(queue.peek() + " "); 
			queue.remove(); 
		} 
	} 

	
	public static void main(String args[]) 
	{ 
		queue = new LinkedList<Integer>(); 
		queue.add(10); 
		queue.add(20); 
		queue.add(30); 
		queue.add(40); 
		queue.add(50); 
		queue.add(60); 
		queue.add(70); 
		queue.add(80); 
		queue.add(90); 
		queue.add(100); 

		int k = 5; 
		reverseQueueFirstKElements(k); 
		Print(); 
	} 
} 


20.Programme to return the nth node from the end in a linked list?
Ans:
class LinkedList { 
	Node head; // head of the list 

	
	class Node { 
		int data; 
		Node next; 
		Node(int d) 
		{ 
			data = d; 
			next = null; 
		} 
	} 

	
	void printNthFromLast(int n) 
	{ 
		Node main_ptr = head; 
		Node ref_ptr = head; 

		int count = 0; 
		if (head != null) { 
			while (count < n) { 
				if (ref_ptr == null) { 
					System.out.println(n + " is greater than the no "
									+ " of nodes in the list"); 
					return; 
				} 
				ref_ptr = ref_ptr.next; 
				count++; 
			} 
			while (ref_ptr != null) { 
				main_ptr = main_ptr.next; 
				ref_ptr = ref_ptr.next; 
			} 
			System.out.println("Node no. " + n + " from last is " + main_ptr.data); 
		} 
	} 

	
	public void push(int new_data) 
	{ 
		
		Node new_node = new Node(new_data); 

		
		new_node.next = head; 

		
		head = new_node; 
	} 

	
	public static void main(String[] args) 
	{ 
		LinkedList llist = new LinkedList(); 
		llist.push(20); 
		llist.push(4); 
		llist.push(15); 
		llist.push(35); 

		llist.printNthFromLast(4); 
	} 
} 

21.Reverse of linked list?
Ans:
 
public class LinkedList{
 
	private Node head;
 
	private static class Node {
		private int value;
		private Node next;
 
		Node(int value) {
			this.value = value;
 
		}
	}
 
	public void addToTheLast(Node node) {
 
		if (head == null) {
			head = node;
		} else {
			Node temp = head;
			while (temp.next != null)
				temp = temp.next;
 
			temp.next = node;
		}
	}
 
 
	public void printList(Node head) {
		Node temp = head;
		while (temp != null) {
			System.out.format("%d ", temp.value);
			temp = temp.next;
		}
		System.out.println();
	}
 
	
	public static Node reverseLinkedList(Node currentNode)
	{
		
		Node previousNode=null;
		Node nextNode;
		while(currentNode!=null)
		{
			nextNode=currentNode.next;
			// reversing the link
			currentNode.next=previousNode;
			// moving currentNode and previousNode by 1 node
			previousNode=currentNode;
			currentNode=nextNode;
		}
		return previousNode;
	}
 
	public static void main(String[] args) {
		LinkedList list = new LinkedList();
		
		Node head=new Node(5);
		list.addToTheLast(head);
		list.addToTheLast(new Node(6));
		list.addToTheLast(new Node(7));
		list.addToTheLast(new Node(1));
		list.addToTheLast(new Node(2));
 
		list.printList(head);
		
		Node reverseHead=reverseLinkedList(head);
		System.out.println("After reversing");
		list.printList(reverseHead);
 
	}
 
} 


22.Replace each and every element of a array by its rank in the array?
Ans:
class Main
{
	
	public static void transform(int[] arr)
	{
		
		Map<Integer, Integer> map = new TreeMap<>();

		
		for (int i = 0; i < arr.length; i++) {
			map.put(arr[i], i);
		}

		
		int rank = 1;

		
		for (var val : map.values()) {
			arr[val] = rank++;
		}
	}

	public static void main(String[] args)
	{
		int[] A = { 10, 8, 15, 12, 6, 20, 1 };

		
		transform(A);

		
		System.out.println(Arrays.toString(A));
	}
}


23.Check if a given graph is a tree or not?
Ans: NOT GIVEN QUESTION PROPERLY.


24.Find the kth smallest element in an unsorted array?
Ans:import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.PriorityQueue;

class Main
{
	
	public static int findKthSmallest(List<Integer> A, int k)
	{
		
		PriorityQueue<Integer> pq = new PriorityQueue<>(Comparator.reverseOrder());
		pq.addAll(A.subList(0, k));

		
		for (int i = k; i < A.size(); i++)
		{
			
			if (A.get(i) < pq.peek())
			{
				
				pq.poll();
				pq.add(A.get(i));
			}
		}

		
		return pq.peek();
	}

	public static void main(String[] args)
	{
		List<Integer> A = Arrays.asList(7, 4, 6, 3, 9, 1);
		int k = 3;

		System.out.println("K'th smallest element in the array is " +
								   findKthSmallest(A, k));
	}
}


25.How to find the shortest path between two vertices?
Ans:1.Input the graph.
2.Input the source and destination nodes.
3.Find the paths between the source and the destination nodes.
4.Find the number of edges in all the paths and return the path having the minimum number of edges.
5.In this way we will get the shortest path between the two vertices.


                  _______________________________________________THE END__________________________________________________________

          